syntax on

set clipboard=unnamedplus
set cursorline
set noerrorbells
set tabstop=4 softtabstop=4 shiftwidth=4
set expandtab smartindent
set number relativenumber
set nowrap
set smartcase ignorecase                      
set showmatch
set nobackup nowritebackup noswapfile hidden
set undofile undodir=~/.vim/undodir
set incsearch hlsearch
set encoding=utf-8
set wildmenu                        " Visual autocomplete for command menu
set splitbelow splitright           " Expected split behaviour
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes
" Shorter delays and better user experience.
set updatetime=100
set colorcolumn=120
"Ignore certain files in tab completion
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.jar,*/node_modules/*,*/target/*
set wildignore+=*/.git/*,*.class,*.pyc,*/plugged/*,*/undodir/*,*.png,*.dex
" Don't show that we are now in Insert mode
set noshowmode
filetype off

call plug#begin('~/.vim/plugged')

" Essentials
Plug 'gruvbox-community/gruvbox'
Plug '~/.fzf'
Plug 'junegunn/fzf.vim'
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
Plug 'tomtom/tcomment_vim'
Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
" Completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
" Dart
Plug 'dart-lang/dart-vim-plugin', { 'for': 'dart' }
" Plug 'majutsushi/tagbar'
" Status Line
Plug 'itchyny/vim-gitbranch'
Plug 'itchyny/lightline.vim'
" Python syntax highlighting
Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins', 'for': 'python' }
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-abolish'
Plug 'fatih/vim-go',  { 'do': ':GoUpdateBinaries' }
" Plug 'wellle/context.vim'
" Plug 'Glench/Vim-Jinja2-Syntax'
" Javascript 
" Plug 'leafgarland/typescript-vim'
" Plug 'pangloss/vim-javascript'
" Plug 'jparise/vim-graphql'
" My plugins
" Plug '~/VimScriptProjects/Plugins/date-set'
" Plug '~/VimScriptProjects/Plugins/restore-cursor'

call plug#end()

filetype plugin indent on    " required

colorscheme gruvbox
set background=dark
let mapleader=","

nnoremap <silent><leader>m :silent! nohls<cr>
nnoremap <silent> <leader>u :UndotreeToggle<CR>
nnoremap <silent> <leader>t :TagbarToggle<CR>
nnoremap <silent><leader>1 :NERDTreeToggle<CR>
nnoremap <silent><leader>! :NERDTreeFind<CR>
nnoremap <leader>2 :e $MYVIMRC<CR>
nnoremap <leader>3 :e ~/.config/nvim/mycocsettings.vim<CR>
nnoremap <leader>4 :e ~/.config/nvim/init.vim<CR>

" Make adjusing split sizes a bit more friendly
nnoremap <silent> <space>h :vertical resize +3<CR>
nnoremap <silent> <space>l :vertical resize -3<CR>
nnoremap <silent> <space>k :resize +3<CR>
nnoremap <silent> <space>j :resize -3<CR>

" Switch to alternative buffer
nnoremap <silent> <tab> :b#<CR>
nnoremap <silent> <C-H> :bp<CR>
nnoremap <silent> <C-L> :bn<CR>
nnoremap Q :qall<CR>
nnoremap <C-S> <esc>:w<CR>
inoremap <C-S> <esc>:w<CR>
" We shouldn't be using these anyway
nnoremap <left> <nop>
vnoremap <left> <nop>
nnoremap <right> <nop>
vnoremap <right> <nop>
nnoremap <down> <nop>
vnoremap <down> <nop>
nnoremap <up> <nop>
vnoremap <up> <nop>

" Keep indent/outdent after first indent/outdent
vnoremap < <gv
vnoremap > >gv

" Enter will open in vertical split
let g:netrw_browse_split = 2
let g:netrw_banner = 0
let g:netrw_winsize = 25

set grepprg=rg\ --vimgrep
nnoremap <c-p> :Files<CR> 
nnoremap <c-e> :Buffers<CR> 
let g:UltiSnipsExpandTrigger="<c-y>"
" Git status
nnoremap <silent> gs :GFiles?<CR>

augroup myoptions
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
  "autocmd BufWritePost vimrc source ~/.config/nvim/init.vim
  autocmd BufEnter *.{js,jsx,ts,tsx,py} :syntax sync fromstart
  autocmd BufLeave *.{js,jsx,ts,tsx,py} :syntax sync clear
  autocmd FileType json syntax match Comment +\/\/.\+$+
  autocmd BufRead,BufNewFile *.sbt,*.sc set filetype=scala
augroup END
augroup scala
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType scala setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)
nmap <leader>gp <Plug>(GitGutterPreviewHunk)
nmap <leader>gu <Plug>(GitGutterUndoHunk)
nmap <leader>gU <Plug>(Gread)
