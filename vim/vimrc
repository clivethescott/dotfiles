syntax on

set noerrorbells
set tabstop=4 softtabstop=4 shiftwidth=4
set expandtab smartindent
set number relativenumber
set nowrap
set smartcase ignorecase                      
set showmatch
set nobackup nowritebackup noswapfile hidden
set undofile undodir=~/.vim/undodir
set incsearch hlsearch
set encoding=utf-8
set wildmenu                        " Visual autocomplete for command menu
set splitbelow splitright           " Expected split behaviour
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes
" Shorter delays and better user experience.
set updatetime=100
set colorcolumn=80
"Ignore certain files in tab completion
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.jar,*/node_modules/*,*/target/*
set wildignore+=*/.git/*,*.class,*.pyc,*/plugged/*,*/undodir/*,*.png,*.dex
filetype off

call plug#begin('~/.vim/plugged')

" Essentials
Plug 'morhetz/gruvbox'
Plug '~/.fzf'
Plug 'junegunn/fzf.vim'
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
" Completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
" Dart
Plug 'dart-lang/dart-vim-plugin', { 'for': 'dart' }

call plug#end()

filetype plugin indent on    " required

colorscheme gruvbox
set background=dark
let mapleader=","

nnoremap <leader>u :UndotreeToggle<CR>
nnoremap <leader>1 :e $MYVIMRC<CR>

" Make adjusing split sizes a bit more friendly
nnoremap <silent> <C-Left> :vertical resize +3<CR>
nnoremap <silent> <C-Right> :vertical resize -3<CR>
nnoremap <silent> <C-Up> :resize +3<CR>
nnoremap <silent> <C-Down> :resize -3<CR>

" Switch to alternative buffer
nnoremap <silent> <tab> :b#<CR>
nnoremap Q :qall<CR>
nnoremap <C-S> <esc>:w<CR>
" Turn off highlighted search results
nnoremap <silent> <esc><esc> :silent! nohls<cr>
" We shouldn't be using these anyway
nnoremap <left> <nop>
vnoremap <left> <nop>
nnoremap <right> <nop>
vnoremap <right> <nop>
nnoremap <down> <nop>
vnoremap <down> <nop>
nnoremap <up> <nop>
vnoremap <up> <nop>

" Keep indent/outdent after first indent/outdent
vnoremap < <gv
vnoremap > >gv
" Match braces
inoremap { {<CR>}<Esc>ko

let g:netrw_browse_split = 2
let g:netrw_banner = 0
let g:netrw_winsize = 25

set grepprg=rg\ --vimgrep
nnoremap <c-p> :Files<CR> 
nnoremap <c-e> :Buffers<CR> 
" Git status
nnoremap <silent> gs :GFiles?<CR>
nnoremap <silent> gf :GFiles<CR>
nnoremap <leader>s :Snippets<CR>

imap <C-j> <Plug>(coc-snippets-expand-jump)
" Coc tab completion
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" GoTo code navigation.
nnoremap <silent> gd <Plug>(coc-definition)
nnoremap <silent> gr <Plug>(coc-references)
" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nnoremap <leader>f  <Plug>(coc-format-selected)
" Symbol renaming.
nnoremap <leader>r <Plug>(coc-rename)
nnoremap <leader>.  <Plug>(coc-codeaction)
" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-p> coc#refresh()
" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction


" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

let g:UltiSnipsExpandTrigger="<c-y>"
