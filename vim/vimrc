syntax on

set nocompatible
set noerrorbells
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set smartindent
set number relativenumber
set nowrap
set smartcase
set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile
set incsearch
set hlsearch                        " Highlight search matches
set ignorecase                      " Ignore case in a pattern
set encoding=utf-8
set hidden
set wildmenu                        " Visual autocomplete for command menu
set splitbelow splitright           " Expected split behaviour

" Give more space for displaying messages.
" set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=50
set colorcolumn=80
"Ignore certain files in tab completion
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.jar,*/node_modules/*,*/target/*,*/.git/*,*.class,*.pyc
filetype off


call plug#begin('~/.vim/plugged')

" Essentials
Plug 'morhetz/gruvbox'
Plug 'joshdick/onedark.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
" Git
" Plug 'tpope/vim-fugitive'
" Completion
Plug 'ycm-core/YouCompleteMe'
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
" Python
Plug 'python-mode/python-mode', { 'for': 'python' }
Plug 'jmcantrell/vim-virtualenv', { 'for': 'python' }
" Dart
Plug 'dart-lang/dart-vim-plugin', { 'for': 'dart' }
" JS
Plug 'yuezk/vim-js', { 'for': 'javascript' }
Plug 'leafoftree/vim-vue-plugin', { 'for': ['javascript', 'html', 'vue'] }

call plug#end()

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
" filetype plugin on

colorscheme gruvbox
set background=dark
let mapleader=" "

" Window movement
nnoremap <leader>h :wincmd h<CR>
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>
nnoremap <leader>u :UndotreeToggle<CR>

" Make adjusing split sizes a bit more friendly
nnoremap <silent> <C-Left> :vertical resize +3<CR>
nnoremap <silent> <C-Right> :vertical resize -3<CR>
nnoremap <silent> <C-Up> :resize +3<CR>
nnoremap <silent> <C-Down> :resize -3<CR>

" Switch to alternative buffer
nnoremap <silent> <tab> :b#<CR>
nnoremap Q :qall<CR>
nnoremap <C-S> <esc>:w<CR>
nnoremap <silent> <leader>y "+y
nnoremap <silent> <leader>Y "+yy
nnoremap <silent> <leader>p "+p
" Turn of highlighted search results
nnoremap <silent> <esc><esc> :silent! nohls<cr>
" We shouldn't be using these anyway
nnoremap <left> <nop>
vnoremap <left> <nop>
nnoremap <right> <nop>
vnoremap <right> <nop>
nnoremap <down> <nop>
vnoremap <down> <nop>
nnoremap <up> <nop>
vnoremap <up> <nop>

let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_use_caching = 1

let g:netrw_browse_split = 2
let g:netrw_banner = 0
let g:netrw_winsize = 25

let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_collect_identifiers_from_tags_files = 1 " read from Ctags
map <leader>b  :YcmCompleter GoToDefinitionElseDeclaration<CR>

let g:python_highlight_all = 1

let g:UltiSnipsExpandTrigger = '<c-g>'
let g:UltiSnipsJumpForwardTrigger = '<c-s-l>'
let g:UltiSnipsJumpBackwardTrigger = '<c-s-k>'

fun! GoYCM()
    nnoremap <buffer> <silent> <leader>gt :YcmCompleter GoTo<CR>
    nnoremap <buffer> <silent> <leader>gr :YcmCompleter GoToReferences<CR>
    nnoremap <buffer> <silent> <leader>rr :YcmCompleter RefactorRename<space>
endfun


fun! GoCoc()
    " Use tab for trigger completion with characters ahead and navigate.
    inoremap <buffer> <silent><expr> <TAB>
                \ pumvisible() ? "\<C-n>" :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ coc#refresh()

    " GoTo code navigation.
    nmap <buffer> <leader>gd <Plug>(coc-definition)
    nmap <buffer> <leader>gi <Plug>(coc-implementation)
	nmap <leader>rr <Plug>(coc-rename)
	
	" Formatting selected code.
    "nmap <leader>l  <Plug>(coc-format-selected)
	
    " Use K to show documentation in preview window.
    nnoremap <silent> K :call <SID>show_documentation()<CR>

	function! s:show_documentation()
		if (index(['vim','help'], &filetype) >= 0)
			execute 'h '.expand('<cword>')
		else
			call CocAction('doHover')
		endif
    endfunction
endfun


" autocmd FileType typescript :call GoYCM()
" autocmd FileType cpp,cxx,h,hpp,c,json,dart :call GoCoc()
