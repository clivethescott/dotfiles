# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet enum "enum using case object"
sealed trait $1
case object $2 extends $1
case object $3 extends $1
endsnippet

snippet print "print with string interpolation"
println(s"$1")
endsnippet

snippet ftest "create a funsuite test"
test("$1") {
$2
}
endsnippet
snippet route "http4s route" b
def $1[F[_]: ${1:Monad}]: HttpRoutes[F] = {
	val dsl = Http4sDsl[F]
	import dsl._

	HttpRoutes.of[F] { case GET -> Root => ${2:???}
	}
}
endsnippet

snippet ember "Configure an Ember Server" b
import org.http4s.ember.server._
EmberServerBuilder
	.default[IO]
	.withHost(ipv4"0.0.0.0")
	.withPort(port"${1:8080}")
	.withHttpApp(${2:app})
	.build
	.use(_ => IO.never)
	.as(ExitCode.Success)
endsnippet

snippet blaze "Configure a Blaze Server" b
import org.http4s.blaze.server._
BlazeServerBuilder[IO]
	.bindHttp(${1:8080}, "localhost")
	.withHttpApp(${2:app})
	.resource
	.useForever
	.as(ExitCode.Success)
endsnippet
