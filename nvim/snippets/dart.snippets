# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet medq "Use MediaQuery size"
MediaQuery.of(context).size.$1
endsnippet
snippet stlss "Create a stateless widget" b
class $1 extends StatelessWidget {
	@override
	Widget build(BuildContext context) {
		return $2;
	}
}
endsnippet
snippet meth "Create a public method" b
/// created by `echo $USER`
$1($2) {
}
endsnippet
snippet stful "Create a stateful widget" b
class $1 extends StatefulWidget {
	@override
	_$1State createState() => _$1State();

}
class _$1State extends State<$1> {
	@override
	Widget build(BuildContext context) {
		return $2;
	}
}
endsnippet
snippet route "Push a material page route"
Navigator.push${1:Replacement}(context,
		MaterialPageRoute<void>(
				builder: (context) => $2),);
endsnippet

global !p
def complete_mixins(t, opts):
	if t:
		opts = [m[len(t):] for m in opts if m.startswith(t)]
	if len(opts) == 1:
		return opts[0]
	return '(' + '|'.join(opts) + ')'
endglobal

snippet 'with' "Add a mixin"
with $1`!p snip.rv=complete_mixins(t[1], ['SingleTickerProviderStateMixin', 'TickerProviderStateMixin'])`
endsnippet
	
